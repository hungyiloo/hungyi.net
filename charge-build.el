;;; charge-build.el --- builds my static blog using charge.el -*- lexical-binding: t; -*-
;;; Commentary:
;;; Code:

(require 'charge)

;; TODO: Move templates out into separate files
(defun my/blog/render-base (site main &optional subtitle meta)
  "Renders base template with SITE, MAIN content, SUBTITLE and META tags."
  (let ((site-name (alist-get :name site))
        (base-url (alist-get :base-url site)))
    (charge-html
     (html
      :lang "en"
      (head
       (meta :charset "utf-8")
       (title ,(when subtitle (concat subtitle " – ")) ,site-name)
       (meta :name "viewport" :content "width=device-width, initial-scale=1")
       (link :rel "stylesheet" :type "text/css" :href ,(concat base-url "style.css"))
       (link :rel "preconnect" :href "https://fonts.googleapis.com")
       (link :rel "preconnect" :href "https://fonts.gstatic.com" :crossorigin nil)
       (link :rel "stylesheet" :href "https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,400;0,700;1,400;1,700&display=swap")
       (link :rel "stylesheet" :href "https://fonts.googleapis.com/css2?family=Rubik:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap")
       (link :rel "stylesheet" :href "https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap")
       (link :rel "icon" :href ,(concat base-url "favicon.ico") :type "image/x-icon")
       ,meta)
      (body
       (header
        (div
         (h1
          (a
           :href ,base-url
           (img :src ,(concat base-url "HY_Light_and_Color_2.svg") :alt "Hung-Yi's Logo")
           (span :class "header-title-text" ,site-name)))
         (a :href "#main" :class "hidden" "Jump to main content")
         (nav
          (ul
           :class "menu"
           (li (a :href ,base-url "BLOG"))
           (li (a :href ,(concat base-url "about") "ABOUT ME"))))))
       (main
        :id "main"
        (div ,main))
       (svg
        :class "footer-swoosh" :fill "transparent" :viewBox "0 0 100 5"
        (path :d "M 0 3 C 11 3 22 0 33 0 C 44 0 55 3 66 3 C 77 3 88 0 100 0 L 100 5 L 0 5 Z"))
       (footer
        (div
         """
         All prose, stylesheets and snippets of code
         (and even most graphics!) on this site
         are written or generated by hand using
         """
         (a :href "https://www.gnu.org/software/emacs/" "GNU Emacs")
         " running on "
         (a :href "https://github.com/hlissner/doom-emacs" "Doom Emacs")))
       (script :async nil :src "https://www.googletagmanager.com/gtag/js?id=UA-180663322-1")
       (script
        """
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());

        gtag('config', 'UA-180663322-1');
        """))))))

(defun my/blog/render-page (page main)
  "Renders page template with PAGE particle and MAIN content."
  (charge-html
   (article
    :class "page"
    (h1 :class "page__title" ,(alist-get :title page))
    (section ,main))))

(defun my/blog/render-post (post main)
  "Renders post template with POST particle and MAIN content."
  (charge-html
   (article
    :class "post"
    (h1 :class "post__title" ,(alist-get :title post))
    (section
     :class "post__meta"
     ,(when-let ((post-date (alist-get :date post)))
        `(span :class "datestamp" ,(format-time-string "%e %B, %Y" (date-to-time post-date)))))
    (section
     :class "post__description"
     ,(when-let ((post-description (alist-get :description post)))
        `(p ,post-description)))
    (section ,main))))

(defun my/blog/render-post-meta (post site)
  "Renders post meta tags with POST particle and SITE config."
  (charge-html
   ((meta :property "og:title" :content ,(alist-get :title post))
    (meta :property "og:url" :content ,(charge-url site post))
    (meta :property "og:description" :content ,(alist-get :description post))
    (meta :property "description" :content ,(alist-get :description post))
    (meta :property "og:image" :content ,(concat (alist-get :base-url site) "HY_Light_and_Color_2.svg"))
    (meta :property "og:type" :content "blog"))))

(defun my/blog/render-blog-index-item (post site)
  "Renders individual POST particle in blog index given the SITE config."
  (charge-html
   (li
    :class "post-item"
    (a
     :href ,(charge-url site post)
     (span :class "post-title" ,(alist-get :title post))
     ,(when-let ((post-date (alist-get :date post)))
        `(span
          :class "post-date datestamp"
          ,(format-time-string "%e %B, %Y" (date-to-time post-date))))
     ,(when-let ((post-description (alist-get :description post)))
        `(div :class "post-description" ,post-description))))))

(defun my/blog/render-blog-index (posts site)
  "Renders blog index with all POSTS and SITE config."
  ;; Sort posts in reverse date order.
  ;; ISO8601 date strings are sortable lexicographically
  (setq posts
        (sort posts
              (lambda (a b)
                (string-greaterp
                 (alist-get :date a)
                 (alist-get :date b)))))
  (charge-html
   ((div :class "section-header" "Latest")
    (ul
     :class "featured posts"
     ,(mapcar
       (lambda (post) (my/blog/render-blog-index-item post site))
       (seq-take posts 1)))
    (div :class "section-header" "Older")
    (ul
     :class "posts"
     ,(mapcar
       (lambda (post) (my/blog/render-blog-index-item post site))
       (seq-drop posts 1))))))

(let* ((posts (charge-collect-org (file-expand-wildcards "content/posts/*.org")))
       (pages (charge-collect-org (file-expand-wildcards "content/*.org")))
       (static-files (charge-collect-files (file-expand-wildcards "theme/static/*")))
       (blog-index (list (charge-particle :posts posts))))

  (charge-site
   :name "Hung-Yi’s Journal"
   :base-url "http://localhost:5000/"
   :output "output"

   (charge-route blog-index
     :url ""
     :path '("index.html" "posts/index.html")
     :emit (lambda (destination particle _route site)
             (charge-write
              (my/blog/render-base
               site
               (my/blog/render-blog-index (alist-get :posts particle) site))
              destination)))

   (charge-route posts
     :url (charge-format "posts/%s" :slug)
     :path (charge-format "posts/%s/index.html" :slug)
     :emit (lambda (destination particle _route site)
             (charge-write
              (my/blog/render-base
               site
               (my/blog/render-post particle (charge-export-particle-org particle))
               (alist-get :title particle)
               (my/blog/render-post-meta particle site))
              destination)))

   (charge-route pages
     :url (charge-format "%s" :slug)
     :path (charge-format "%s/index.html" :slug)
     :emit (lambda (destination particle _route site)
             (charge-write
              (my/blog/render-base
               site
               (my/blog/render-page particle (charge-export-particle-org particle))
               (alist-get :title particle))
              destination)))

   (charge-route static-files
     :url (charge-format "%s" :filename)
     :path (charge-format "%s" :filename)
     :emit (lambda (destination particle _route _site)
             (copy-file (alist-get :path particle) destination t)))))

;;; charge-build.el ends here
