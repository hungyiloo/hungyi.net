#+TITLE: Split a List Into Batches Using Emacs Lisp
#+SLUG: split-list-into-batches-elisp
#+DATE: 2021-04-02T14:26:02+08:00
#+DESCRIPTION: An exercise to write a simple Emacs Lisp function that can be used to chop a list of things into batches of a given size, including examples of unit testing and boundary value analysis.

[2021-10-07 Thu] I made a mistake! üòÖ There's (probably) nothing wrong with the code I wrote in my original post, but there's /already/ a function in Emacs that does exactly what I was trying to achieve: namely ~seq-partition~. It even takes the exact same parameters as my old function.

It turns out "partition" is a word commonly used in computer science to refer to splitting lists in various ways, like in the ubiquitous [[https://en.wikipedia.org/wiki/Quicksort][quicksort algorithm]].

Here's a quick demonstration of it in action:

#+begin_src emacs-lisp :exports both :results code :cache yes
(require 'seq)
(seq-partition '(1 2 3 4 5 6 7 8 9) 4)
#+end_src

#+RESULTS[453b1696f0a89045577931a0f7b8e1535f841cab]:
#+begin_src emacs-lisp :eval never
((1 2 3 4)
 (5 6 7 8)
 (9))
#+end_src

Please use the built-in ~seq-partition~ and not my code üôè

If you'd like to read through my adventures in naivety anyway, the original post follows below. It's still a good exercise in using ~cl-loop~ and boundary value analysis.

------

Sometimes a list of things is too large and it needs to be split into batches before it can be processed effectively. A quick google didn't reveal any quick copy-pastable elisp (a.k.a. Emacs Lisp) functions that did this kind of batching, so I cobbled together what I found and came up with this ~cl-loop~ implementation, which is hopefully performant.


Feel free to copy paste it as is, since it should be general enough to use anywhere .

#+begin_src emacs-lisp :exports both :results code :results silent :eval no-export
(require 'cl-lib)

(defun my/batch-list (input size)
  "Split INPUT list into a batches (i.e. sublists) of maximum SIZE."
  (when (< size 1)
    (error "SIZE of the batches must be at least 1"))
  (unless (seqp input)
    (error "INPUT must be a sequence or list"))
  (cl-loop with tail = input
           while tail
           collect (cl-loop for ptr on tail
                            for i upfrom 0
                            while (< i size)
                            collect (car ptr)
                            finally (setf tail ptr))))
#+end_src

* Example Usage & Unit Tests

To use it, just call it with the ~input~ list and the maximum ~size~ of the batches that it should split into.

For example, splitting a list of ~(1 2 3 4 5 6 7 8 9)~ into batches of max size ~3~
#+begin_src emacs-lisp :exports both :results code :cache yes
(my/batch-list '(1 2 3 4 5 6 7 8 9) 3)
#+end_src

#+RESULTS[bf39b14fa53a380faf59960de24042158aad00c6]:
#+begin_src emacs-lisp :eval never
((1 2 3)
 (4 5 6)
 (7 8 9))
#+end_src

And a batch size of ~4~ to see what happens when the ~size~ doesn't evenly divide the length of the ~input~ list.
#+name: not-even
#+begin_src emacs-lisp :exports both :results code :cache yes
(my/batch-list '(1 2 3 4 5 6 7 8 9) 4)
#+end_src

/Spoiler: the last batch is chopped short compared to the others ü™ì/
#+RESULTS[8153da06914e14728e4484209fa3be2f7dccb7a8]: not-even
#+begin_src emacs-lisp :eval never
((1 2 3 4)
 (5 6 7 8)
 (9))
#+end_src

Let's try some other tricky inputs to check for sane behavior üòà [fn:1]

Like a ~size~ that is equal to the length of the ~input~ list
#+begin_src emacs-lisp :exports both :results code :cache yes
(my/batch-list '(1 2 3 4 5 6 7 8 9) 9)
#+end_src

#+RESULTS[8ff1b42b8794d96336eb8d36e407bae9a9149db4]:
#+begin_src emacs-lisp :eval never
((1 2 3 4 5 6 7 8 9))
#+end_src

Or a ~size~ that exceeds the length of ~input~
#+begin_src emacs-lisp :exports both :results code :cache yes
(my/batch-list '(1 2 3 4 5 6 7 8 9) 10)
#+end_src

#+RESULTS[4f511a102d7c1000d75ac5e9e73d5b4ca574a818]:
#+begin_src emacs-lisp :eval never
((1 2 3 4 5 6 7 8 9))
#+end_src

How about a batch ~size~ of ... just ~1~?
#+begin_src emacs-lisp :exports both :results code :cache yes
(my/batch-list '(1 2 3 4 5 6 7 8 9) 1)
#+end_src

#+RESULTS[97314a797dda32c8b0e6816312d76df2deded669]:
#+begin_src emacs-lisp :eval never
((1)
 (2)
 (3)
 (4)
 (5)
 (6)
 (7)
 (8)
 (9))
#+end_src

[fn:1] This kind of messing around is actually called /Boundary Testing/ or [[https://en.wikipedia.org/wiki/boundary-value_analysis][Boundary-Value Analysis]] and is a good way to ensure your code is robust. You'll also notice in the function that I also checked that the size is above ~0~, otherwise ~cl-loop~ would run forever.
