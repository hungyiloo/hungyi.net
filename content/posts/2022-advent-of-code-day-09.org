#+TITLE: Advent of Code 2022: Day 9
#+SLUG: 2022-advent-of-code-day-09
#+DATE: 2022-12-09T18:16:31+07:00
#+DESCRIPTION: A TypeScript solution for the Advent of Code 2022, Day 9 puzzle: rope physics simulation.
#+OPTIONS: \n:t

[[https://adventofcode.com/2022/day/9][Today's puzzle]] asks us to model a rope as a string of knots, where each knot is a coordinate in 2D space, as they follow each other according to some simple movement rules.

The puzzle provides us with example input representing the movement of the head of the rope, which looks like this.
#+name: example-input
#+begin_example
R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2
#+end_example

We start by parsing the input data into a more usable data structure: a list of movements.
#+name: sol1
#+begin_src typescript :exports code :results code :eval never
const movements = puzzleInput.split('\n')
  .map(line => ({
    direction: line[0],
    steps: parseInt(line.slice(2))
  }));
#+end_src
Each movement contains a ~direction~ property, which is the first character of the original input string (R, U, L, or D), and a ~steps~ property, which is the number of steps indicated in the original input string converted to an integer using ~parseInt()~.

Now we define two type aliases: ~Knot~ and ~Rope~. A ~Knot~ is a tuple (an array with a fixed number of elements) containing two number values, representing the =x= and =y= coordinates of a single knot in 2D space. A ~Rope~ is an array of ~Knot~ tuples, representing a string of knots in 2D space.
#+name: sol2
#+begin_src typescript :exports code :results code :eval never
type Knot = readonly [number, number];
type Rope = Knot[];
#+end_src
By defining these type aliases, the code allows for more concise and expressive type annotations, making it easier to understand the data structures used in the program.

Now we implement a function named ~follow1D()~ that takes two number values, ~head~ and ~tail~, as arguments. The function implements the rules for moving the tail of a rope in one dimension (either the =x= or =y= dimension) based on the position of the head of the rope.
#+name: sol3
#+begin_src typescript :exports code :results code :eval never
const follow1D = (head: number, tail: number) => {
  if (head === tail) return tail;
  if (head > tail) return tail + 1;
  else return tail - 1;
}
#+end_src
Here is how it works in the X dimension:[fn:2]

#+begin_comfy
- If the ~head~ and ~tail~ are at the same position, the function returns the ~tail~. This means that the tail does not move if the head is at the same position as the tail in the given dimension.

- If the ~head~ is to the right of the ~tail~ (if the =x= coordinate of the head is greater than the =x= coordinate of the tail), the function returns the *~tail~ plus one*. This means that the tail moves one step to the right to follow the head.

- If the ~head~ is to the left of the ~tail~ (if the =x= coordinate of the head is less than the =x= coordinate of the tail), the function returns the *~tail~ minus one*. This means that the tail moves one step to the left to follow the head.
#+end_comfy

Now we define ~follow2D()~ that takes two ~Knot~ tuples, =[headX, headY]= and =[tailX, tailY]=, as arguments. The function implements the rules for moving the tail of a rope in *two* dimensions (the =x= and =y= dimensions) based on the position of the head of the rope.
#+name: sol4
#+begin_src typescript :exports code :results code :eval never
const follow2D = (
  [headX, headY]: Knot,
  [tailX, tailY]: Knot
) => {
  // head and tail still touching; tail doesn't move
  if (Math.abs(headX - tailX) <= 1
      && Math.abs(headY - tailY) <= 1) {
    return [tailX, tailY] as const;
  }
  // otherwise, move the tail closer to the head
  return [
    follow1D(headX, tailX),
    follow1D(headY, tailY)
  ] as Knot;
}
#+end_src

#+begin_comfy
- The function checks if the ~head~ and ~tail~ are touching, that is, if the =x= and =y= coordinates of the head are within one unit of the =x= and =y= coordinates of the tail. If this is the case, the function returns the ~tail~ as it is. This means that the tail does not move if the head is already touching it.

- If the ~head~ and ~tail~ are *not* touching, the function uses ~follow1D()~ (defined previously) to move the tail one step closer to the head in each dimension. This means that the tail moves one step closer to the head in the =x= dimension and one step closer to the head in the =y= dimension.
#+end_comfy

Finally we implement ~simulate()~ which takes a number value, ~ropeLength~, as an argument. The function simulates the movement of a rope of the given length according to the movement instructions provided in the ~movements~ array (i.e. the puzzle input).

#+name: sol5
#+begin_src typescript :exports code :results code :eval never
const simulate = (ropeLength: number) => {
  let rope = Array(ropeLength).fill([0,0]);
  const tailPositions = new Set<string>();

  for (const { direction, steps } of movements) {
    Array(steps).fill(0).forEach(() => {
      let [headX, headY] = rope[0];
      switch (direction) {
        case 'U': headX--; break;
        case 'D': headX++; break;
        case 'L': headY--; break;
        case 'R': headY++; break;
      }
      rope = rope.map(
        (knot, ii) =>
          ii === 0
            ? [headX, headY]
            : follow2D(rope[ii - 1], knot)
      );
      tailPositions.add(rope[rope.length - 1].join(','));
    });
  }

  return tailPositions.size;
}
#+end_src
Here is how the simulation works:

#+begin_comfy
- The function initializes the rope array with ~ropeLength~ number of knots, each at position =[0, 0]= (the origin). It also initializes a ~tailPositions~ set to keep track of the different positions that the tail of the rope reaches during the simulation.

- The function loops over the ~movements~ array, and for each movement, it moves the head of the rope in the specified direction by the specified number of steps.

- For each step, the function moves the head of the rope one step in the specified direction based on a ~switch~ statement. It then updates the positions of all the knots in the rope array by calling  ~follow2D()~ to *move each knot one step closer to the previous knot*.[fn:1] Finally, it adds the new position of the tail of the rope to the ~tailPositions~ set.

- After all the movements have been processed, the function returns the number of different positions that the tail of the rope reached, which is the ~size~ of the ~tailPositions~ set.
#+end_comfy

Part 1 of the puzzle asks for us to track a rope with =2= knots, a head and a singular tail, of which we track the positions.
#+name: sol6
#+begin_src typescript :exports code :results code :eval never
const part1 = simulate(2);
#+end_src

Part 2 makes us simulate a longer knot with 1 head plus 9 tails, i.e. a rope of length =10=.
#+name: sol7
#+begin_src typescript :exports code :results code :eval never
const part2 = simulate(10);
#+end_src

* Final Solution
#+name: solution
#+begin_src typescript :exports code :results code :eval never :noweb yes
<<sol1>>

<<sol2>>

<<sol3>>

<<sol4>>

<<sol5>>

<<sol6>>
<<sol7>>

console.log("Part 1:", part1);
console.log("Part 2:", part2);
#+end_src

#+name: code
#+begin_src typescript :exports results :results code :noweb yes :cache yes
<<input>>
<<solution>>
#+end_src

#+RESULTS[a9718418d27b61e62c4f0af132f0f16c481c686b]: code
#+begin_src typescript
Part 1: 6354
Part 2: 2651
#+end_src

#+name: input
#+begin_src typescript :exports none :eval never
const puzzleInput =
`L 2
R 1
U 1
D 2
R 1
U 2
D 1
R 1
L 2
U 2
L 2
R 2
D 2
U 2
R 1
U 2
D 2
R 1
D 2
U 2
R 1
L 1
D 1
R 1
L 2
D 1
L 1
R 2
U 2
R 2
D 1
R 2
L 1
R 2
D 1
L 1
R 1
U 2
R 1
L 2
D 1
R 1
U 2
R 1
D 1
R 1
D 1
U 2
D 1
U 1
D 1
L 2
R 2
L 2
R 1
D 2
R 1
L 1
R 2
L 2
R 2
U 1
R 1
L 2
D 1
R 1
D 2
U 2
R 2
L 1
R 1
U 2
R 2
L 2
D 2
R 1
L 2
D 1
L 2
D 1
L 2
R 1
D 1
L 2
D 2
U 1
L 1
R 2
U 1
D 1
U 1
L 1
R 2
U 2
L 1
R 1
U 2
R 2
D 1
U 2
D 2
U 2
D 2
L 1
D 2
R 1
L 2
U 2
R 1
D 2
U 2
D 2
R 3
L 2
U 1
D 2
R 2
U 3
L 3
U 3
L 3
U 1
R 2
L 1
D 1
U 1
D 3
L 1
D 2
U 1
D 1
R 2
D 3
R 1
D 2
L 2
R 2
D 1
U 1
L 1
U 3
L 1
U 3
D 3
L 3
U 3
R 3
U 1
D 1
R 3
U 3
D 1
U 3
L 3
D 3
R 2
L 3
U 2
D 1
U 3
L 3
R 2
U 2
R 1
L 3
D 3
L 2
R 2
D 2
L 3
R 1
L 1
U 2
L 2
U 1
L 2
U 3
R 1
D 3
R 3
U 1
R 3
L 2
D 3
L 1
U 3
R 1
U 1
L 2
U 3
R 3
L 3
D 3
L 2
R 1
U 3
L 3
R 3
D 3
L 3
U 3
R 3
D 2
R 2
L 2
R 3
U 3
L 2
U 3
L 3
U 3
R 1
D 3
U 1
D 1
L 2
R 3
L 3
D 2
L 1
D 2
L 3
D 1
L 4
U 1
R 3
L 3
R 2
L 1
R 1
U 1
D 4
R 1
U 2
L 4
U 4
D 4
U 2
D 2
U 4
D 2
R 4
U 1
L 3
U 1
L 1
D 3
R 1
L 4
D 4
U 4
R 3
D 1
R 1
L 2
R 2
U 4
R 3
U 3
D 1
L 4
R 3
L 3
R 3
D 3
R 4
L 4
R 3
U 3
D 3
R 3
L 2
R 1
D 3
U 1
R 3
L 4
U 2
R 4
U 4
L 2
R 1
L 4
R 1
D 3
U 4
R 2
D 2
L 2
U 2
R 1
L 1
R 2
U 4
D 3
R 1
L 3
U 2
D 2
L 2
D 2
R 2
L 1
U 4
L 4
R 3
D 2
R 3
L 3
D 1
R 4
U 4
R 1
U 3
D 2
R 2
D 2
L 3
D 4
L 1
U 4
L 4
U 1
D 3
L 1
U 1
D 4
L 1
U 2
L 2
U 3
L 1
U 1
L 1
U 3
R 4
D 1
R 1
U 5
R 4
L 4
U 1
R 1
D 2
R 2
D 3
L 1
D 3
L 4
R 1
U 4
D 5
L 4
D 5
R 4
U 3
R 4
D 3
R 5
U 5
D 4
R 1
D 2
U 5
D 5
U 5
L 2
D 4
L 1
R 1
L 2
D 2
L 1
D 4
U 5
D 2
L 4
R 3
L 4
U 1
D 5
U 3
R 3
L 1
D 3
L 1
R 3
L 3
D 4
L 3
U 1
D 2
R 3
L 3
D 5
U 4
L 1
R 3
L 1
U 2
D 1
L 2
D 4
L 1
D 2
R 2
L 2
D 5
R 2
D 1
U 1
D 4
R 4
L 3
D 1
U 3
D 3
L 5
D 5
L 1
U 3
L 5
D 3
R 5
U 4
L 3
U 4
L 1
R 4
D 1
U 2
R 1
U 4
R 2
L 1
R 2
L 4
D 2
R 1
D 1
U 1
D 1
R 4
L 3
R 4
U 3
R 4
U 6
R 5
L 4
U 5
D 5
L 3
R 2
U 3
D 5
U 3
D 4
U 6
D 6
U 3
R 3
D 2
R 1
L 6
R 2
D 5
L 1
U 3
D 2
U 6
L 2
U 4
R 3
U 3
L 4
U 6
R 4
U 1
L 5
U 2
D 4
U 3
L 6
U 5
D 4
U 4
R 6
L 3
R 2
L 6
D 5
R 5
L 4
D 2
R 5
U 2
L 5
U 6
D 6
R 5
L 1
D 1
U 3
R 3
D 2
U 3
R 3
U 4
D 4
L 3
R 4
U 6
D 5
U 2
R 2
D 4
U 3
R 2
U 6
L 2
R 3
L 3
U 1
D 3
R 3
U 1
D 6
R 2
U 2
L 2
R 6
U 6
L 1
R 6
L 3
U 1
D 2
R 1
D 2
L 6
D 1
L 6
R 5
D 6
U 3
L 2
R 6
L 2
D 4
R 5
L 1
R 2
L 4
U 3
D 6
U 6
D 4
L 5
U 4
R 4
D 1
U 1
R 3
L 3
D 7
L 6
R 2
D 2
U 7
L 6
R 3
U 7
L 6
R 4
U 1
L 2
D 1
L 7
R 4
L 3
R 5
U 7
R 4
D 6
L 6
R 3
L 7
R 7
L 2
D 7
U 1
R 3
U 6
D 4
U 1
D 2
U 4
D 7
R 2
L 1
D 2
U 3
L 7
U 6
R 2
U 1
R 4
L 3
D 7
R 7
L 7
D 1
L 4
R 6
L 4
R 5
L 4
D 7
R 4
L 5
U 7
D 1
R 1
D 2
L 7
D 4
R 2
D 1
L 7
D 1
L 4
R 3
D 6
L 6
U 1
L 7
R 4
L 2
U 6
D 3
L 1
U 6
D 2
U 5
L 5
D 6
U 7
D 6
R 4
U 6
R 1
U 3
L 1
U 4
R 7
L 3
U 6
L 6
U 5
D 7
R 4
D 3
U 7
R 2
L 2
U 2
L 5
R 4
L 2
U 5
D 2
U 3
D 2
R 5
L 1
R 5
U 3
R 1
D 7
R 4
L 6
D 7
U 1
R 2
D 6
R 2
U 2
D 8
L 7
U 5
L 8
D 7
L 5
R 1
U 7
D 4
L 4
D 1
L 1
U 8
L 7
U 4
L 8
U 7
R 6
U 2
R 7
L 4
U 2
R 7
U 5
R 6
D 1
L 3
D 1
R 8
U 5
D 3
U 4
L 4
U 5
R 8
D 3
U 1
R 8
L 6
U 8
L 3
U 2
R 5
D 8
L 8
R 3
L 3
D 7
R 1
U 2
L 7
D 6
R 2
D 6
U 4
D 6
U 6
R 7
U 1
L 1
D 4
U 8
D 4
L 6
D 4
U 5
L 3
U 8
R 4
U 3
L 4
R 2
L 1
R 1
L 2
D 3
L 4
D 6
L 5
D 3
R 3
D 4
L 5
R 4
L 6
U 5
L 1
D 3
U 4
R 6
D 2
U 1
L 3
D 9
L 6
U 9
R 3
D 8
L 1
R 9
U 4
R 2
D 7
R 7
D 4
U 8
R 5
L 3
R 2
L 3
D 5
L 1
U 9
R 7
U 3
L 9
U 8
L 6
R 7
U 1
L 3
R 8
D 9
U 1
D 9
R 8
D 6
L 8
R 5
L 6
D 7
R 3
D 5
R 4
D 2
L 4
D 6
U 3
D 2
R 1
L 2
R 8
D 3
L 2
D 2
U 2
R 9
U 1
L 7
R 6
L 2
R 5
U 6
D 7
U 7
R 6
L 3
R 7
D 5
L 4
D 3
U 7
R 1
U 4
L 5
D 7
U 2
L 5
D 8
L 7
U 3
D 5
L 5
D 7
L 1
U 1
D 9
U 3
L 9
U 5
D 8
U 6
L 3
R 9
U 2
R 8
L 9
U 4
L 5
R 3
U 6
R 7
U 8
D 3
L 1
D 5
R 6
U 9
L 6
D 9
L 10
D 4
U 7
D 1
U 6
L 2
U 1
R 8
U 5
L 7
R 10
U 3
D 1
R 5
U 8
R 8
D 6
R 10
D 10
L 10
D 4
R 5
U 9
R 7
L 3
D 5
R 6
U 7
D 8
R 8
L 4
R 10
L 2
U 7
R 7
D 3
U 9
R 5
D 10
U 3
R 5
L 8
D 4
U 9
R 8
D 2
R 4
L 5
R 10
D 5
R 5
U 1
D 1
L 1
U 2
D 5
R 1
L 10
D 7
L 8
D 2
R 6
D 3
L 7
D 3
L 4
U 10
R 10
D 7
L 4
U 4
R 3
U 7
D 7
L 1
D 7
L 2
U 5
R 8
U 7
D 10
L 8
D 8
R 4
U 1
R 1
U 8
D 6
R 5
U 2
D 1
R 9
U 9
D 10
L 9
U 4
R 10
U 7
D 6
L 9
U 1
L 10
R 4
D 4
L 5
D 5
U 2
D 6
R 1
D 5
L 1
D 2
L 11
R 2
U 5
R 9
U 9
L 11
U 4
L 6
D 8
L 6
U 11
R 7
U 8
R 10
D 5
U 8
R 11
D 3
U 5
R 8
D 6
R 10
U 9
D 5
R 3
U 1
L 10
D 5
U 7
R 7
L 11
U 5
D 3
U 5
L 11
U 10
L 3
R 2
D 7
L 10
U 7
L 8
R 7
U 6
D 2
L 2
R 2
U 8
L 6
R 8
D 9
U 10
R 5
D 6
R 5
L 1
D 6
L 2
D 3
L 5
U 11
L 11
R 7
U 7
D 7
R 10
U 5
R 10
U 2
D 5
R 2
U 8
D 7
L 6
D 3
R 6
L 10
D 6
U 5
L 1
D 3
U 2
L 3
U 4
D 7
U 4
L 10
D 8
L 11
U 11
D 4
U 11
R 10
L 10
U 9
R 3
L 6
D 8
R 8
D 10
R 8
D 3
R 7
L 5
R 5
L 8
U 10
L 7
D 10
R 5
D 4
R 6
D 3
L 7
R 7
U 12
R 3
U 2
R 7
D 10
R 12
D 8
U 4
R 2
D 11
L 7
U 3
L 12
D 12
U 1
R 10
L 5
D 4
U 7
R 1
L 12
R 7
U 8
R 8
L 8
R 9
L 1
U 3
L 4
R 3
L 8
R 3
L 1
D 1
U 9
D 9
U 8
R 7
L 9
D 12
R 1
D 8
U 5
R 9
U 6
D 2
L 5
R 6
U 11
D 2
U 4
D 10
L 8
U 10
R 11
U 5
R 6
D 11
R 10
D 9
U 5
D 1
R 2
D 11
R 3
U 5
R 3
D 7
R 6
L 2
U 1
L 9
D 1
R 9
D 12
R 11
D 12
U 8
L 12
D 11
U 3
D 10
L 6
R 10
U 9
R 10
D 5
R 9
D 11
L 1
D 4
L 10
D 3
L 9
R 5
U 3
L 2
D 6
L 1
D 9
L 9
D 9
U 11
L 11
R 8
D 2
U 7
L 6
U 13
R 8
D 7
R 11
U 5
R 12
U 5
D 5
U 10
D 13
U 9
R 9
U 6
D 7
R 6
D 10
L 7
D 9
U 2
R 7
U 13
L 3
U 5
R 12
U 10
L 10
R 6
L 4
D 11
U 8
L 8
D 4
R 12
D 3
R 13
D 1
U 10
R 9
L 9
U 3
R 4
L 11
U 10
L 5
R 10
L 6
D 9
R 2
D 13
U 11
R 9
D 9
L 9
R 11
U 8
D 9
R 4
L 9
U 2
R 4
L 11
R 12
U 7
D 6
L 5
D 4
U 5
D 9
R 8
D 6
U 4
L 5
U 11
R 2
U 9
L 3
D 12
R 5
D 12
L 12
D 2
U 3
L 9
D 2
R 10
L 2
U 5
R 7
L 10
U 12
D 10
R 4
D 10
R 11
U 10
R 10
U 11
D 5
U 12
L 10
D 13
R 13
D 3
L 8
U 3
D 8
R 13
D 2
R 13
U 13
D 1
L 5
D 9
L 1
U 11
R 3
U 4
D 6
U 6
R 5
D 10
U 14
D 10
R 6
D 12
U 5
D 1
R 10
D 11
L 1
U 8
L 12
R 10
D 5
U 14
R 14
D 2
R 4
U 9
L 7
R 12
U 9
D 8
L 2
U 3
D 2
L 4
U 10
R 13
U 10
D 1
L 6
D 4
L 4
D 11
U 6
R 12
D 2
L 13
R 11
U 2
L 3
D 5
U 13
D 1
U 7
L 3
R 6
L 10
D 4
R 4
U 11
L 5
D 13
U 4
R 2
L 11
U 13
L 5
D 4
U 6
L 11
U 5
R 4
U 5
L 1
D 13
U 13
R 14
U 10
D 11
R 2
L 9
D 11
R 5
U 14
L 10
D 9
U 5
R 2
U 10
L 11
R 9
U 7
L 12
U 2
L 4
D 3
U 7
D 11
U 8
L 7
R 8
U 10
D 7
L 8
R 1
L 5
R 4
U 10
R 14
L 9
U 11
D 10
U 10
R 9
L 1
R 7
L 4
U 1
R 6
U 12
D 5
L 14
D 5
U 9
R 5
D 7
R 2
L 7
D 5
R 10
L 8
D 7
L 5
U 9
L 13
U 14
L 2
D 2
R 9
U 5
R 8
D 14
L 2
R 6
L 8
U 2
L 4
D 11
U 5
R 11
D 7
L 3
U 5
R 15
L 3
U 10
R 2
L 1
R 9
U 9
R 13
U 9
L 8
R 13
D 4
R 13
D 2
U 2
L 14
D 3
L 4
D 1
L 11
D 11
R 11
U 3
L 1
D 9
U 8
D 2
R 11
D 4
U 13
L 12
U 14
D 7
L 7
D 4
R 14
D 9
R 8
U 8
D 10
U 4
D 8
U 8
D 14
R 7
U 11
D 14
R 5
U 11
R 13
L 9
U 14
D 9
R 15
L 11
D 6
L 13
U 11
R 13
D 10
L 4
D 9
L 3
R 1
D 13
U 13
L 1
R 5
D 5
U 2
R 7
D 6
R 9
D 15
U 15
R 11
D 13
R 14
L 11
R 13
D 4
R 16
L 3
U 2
D 12
R 5
L 13
D 8
U 4
D 3
R 13
L 6
D 15
U 6
R 6
D 6
R 3
L 5
D 15
R 1
D 4
U 6
D 7
R 14
D 16
L 6
D 8
U 10
D 4
R 13
D 11
U 4
D 3
U 16
L 6
D 5
U 15
L 14
D 8
R 2
D 16
R 10
U 15
R 16
D 6
R 15
L 15
U 11
R 6
L 6
U 10
D 11
L 5
D 8
L 15
R 4
U 10
D 4
R 3
U 1
L 12
D 16
L 6
U 10
R 5
L 4
U 11
R 14
U 3
L 16
U 12
D 14
L 3
R 8
L 10
R 10
D 14
L 15
D 3
R 2
U 16
D 4
L 13
U 5
R 6
U 7
R 3
L 13
U 6
D 5
U 14
R 12
U 15
L 7
U 15
D 11
L 13
U 13
R 2
D 17
R 17
L 11
R 9
L 16
U 16
D 4
L 16
U 10
L 4
U 2
D 12
U 1
R 8
D 8
U 15
D 12
R 10
U 1
R 1
L 12
R 6
U 13
L 12
U 8
L 2
R 13
D 9
U 15
L 6
U 1
D 11
L 1
U 13
D 4
L 14
U 7
D 2
L 15
U 15
R 7
L 11
U 16
R 12
D 14
L 17
U 10
D 2
R 5
L 6
D 4
U 15
L 16
R 12
D 7
U 1
D 7
L 10
D 3
L 6
U 7
D 16
L 16
U 12
R 17
L 16
U 2
R 1
U 9
D 1
R 3
U 4
L 4
D 14
U 5
D 7
L 16
D 4
U 16
R 7
L 4
U 2
R 13
U 3
R 6
L 15
R 3
D 13
L 10
R 14
L 14
D 17
R 6
L 12
R 5
U 1
R 2
L 11
R 3
D 13
U 4
D 5
R 5
L 9
D 1
U 2
R 11
D 17
R 14
D 3
R 1
L 1
D 15
U 3
R 16
L 1
U 5
L 4
U 5
L 18
R 15
D 10
R 8
D 15
U 10
R 2
U 16
R 14
U 12
L 14
D 6
L 6
D 1
R 12
D 5
L 13
D 9
L 11
D 7
L 15
U 16
D 7
R 17
L 13
R 1
D 15
L 5
U 17
R 15
D 4
L 1
U 16
D 18
U 4
L 6
U 14
D 3
R 1
D 10
U 16
L 10
U 2
R 1
U 8
D 14
L 17
D 2
L 8
D 17
L 10
D 4
L 1
U 17
L 9
U 7
D 14
U 11
D 5
L 13
U 11
L 17
R 13
U 8
D 7
R 18
L 18
R 17
L 9
D 5
R 12
U 10
D 17
R 18
D 8
L 9
R 16
D 6
L 17
D 18
U 5
R 7
D 17
L 4
D 14
U 17
R 6
L 7
R 7
L 15
R 6
L 11
U 12
R 16
L 8
U 10
L 2
D 15
L 5
R 16
U 10
L 9
R 6
D 13
L 9
U 16
L 16
R 16
D 13
L 13
U 16
L 3
D 18
R 11
L 13
U 9
R 6
L 3
U 8
L 2
D 13
L 2
R 12
D 9
R 2
L 5
D 16
R 6
U 9
D 8
R 10
D 11
R 17
U 5
D 11
U 18
R 9
D 2
U 2
R 9
D 9
U 1
R 11
L 18
D 6
U 9
L 4
R 10
D 17
L 16
D 5
U 5
R 16
D 8
U 6
D 3
U 12
L 2
R 5
D 1
L 6
U 9
D 12
L 1
D 14
R 19
L 7
R 9
L 3
R 4
L 15
D 10
U 5
D 14
L 7
D 5
L 5
D 18
U 15
L 5
U 7
R 17
U 19
D 19
L 11
D 6
R 13
D 11
R 2
L 8
R 15
L 17
D 17
R 5
U 8
D 1
U 13
R 8
L 18
U 19
R 1
D 17
L 9
R 19
D 6
R 2
D 17
U 2
D 9
R 5
U 11
L 12
U 19
D 13`;
#+end_src

[fn:1] Realising that each knot follows the previous knot, like a game of snake, is what unifies the part 1 and part 2 solutions to one set of rules. Part 1 just happens to be a special case where there is one head and exactly one following tail.

[fn:2] But the Y dimension works too, since ~follow1D()~ is dimension agnostic.
